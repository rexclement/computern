p2 HTTP CLIENT
import socket
s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
s.connect(("aurcc.ac.in",80))
s.sendall(b"GET / HTTP/1.1\r\nHost:www.aurcc.ac.in \r\nAccept:text/html\r\n\r\n")
print(str(s.recv(4096),'utf-8'))


p3a ECHO CLIENT AND ECHO SERVER

Server:
import socket
server=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
server_address=('localhost',10000)
server.bind(server_address)
server.listen(1)
connection, client_address=server.accept()
print("Connection established with: ",client_address)
data=connection.recv(1000)
print("Received:",data)
connection.sendall(data)
connection.close()
server.close()


Client:
import socket
client=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
server_address=('localhost',10000)
client.connect(server_address)
print("Enter the message")
message=input()
print("Sending",message)
client.sendall(message.encode())
print("ORIGINAL: ",message)
data=client.recv(1000).decode()
print("ECHO: ",data)
client.close()


p3b IMPLEMENTING CHAT APPLICATION USING TCP SOCKETS
Date

Server:
import socket
server=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
server_address=('localhost',10000)
server.bind(server_address)
server.listen(1)
print(“waiting for connection”)
connection, client_address=server.accept()
message=" "
while message!="end":
data=connection.recv(1000).decode()
if data:
print(data)
message=input()
connection.sendall(message.encode())
else:
break
connection.close()
server.close()



Client:
import socket
client=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
server_address=('localhost',10000)
client.connect(server_address)
message=input()
client.sendall(message.encode())
while message!="end":
data=client.recv(1000).decode()
if data:
print(data)
message=input()
client.sendall(message.encode())
else:
break
client.close()



p4
SIMULATION OF DNS USING UDP PROTOCOLS

Client :
import socket
hostname = socket.gethostname()
ipaddr = "127.0.0.1"
s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
addr = (ipaddr, 1234)
c = "Y"
while c.upper() == "Y":
req_domain = input("Enter domain name for which the ip is needed: ")
send = s.sendto(req_domain.encode(), addr)
data, address = s.recvfrom(1024)
reply_ip = data.decode().strip()
print(f"The ip for the domain name {req_domain}: {reply_ip}")
c = (input("Continue? (y/n)"))
s.close()



Server:
import socket
dns_table = {"www.google.com": "192.168.0.1", "www.wikipedia.org": "192.168.0.2",
"www.python.org": "192.168.0.3", "www.aurcc.ac.in": "192.168.0.4", "www.amazon.in":
"192.168.0.5",” www.tamilrockers.ta": "192.168.1.3"}
s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
print("Starting Server...")
s.bind(("127.0.0.1", 1234))
while True:
data, address = s.recvfrom(1024)
Expt No : 4 a
SIMULATION OF DNS USING UDP PROTOCOLS
Date :
print(f"{address} wants to fetch
data!") data = data.decode()
ip = dns_table.get(data, "Not Found!").encode()
send = s.sendto(ip, address)
s.close()


p5  ARP AND RARP

Server code:
import socket
table={
'192.168.1.1':'1E.4A.4A.11', '192.168.2.1':'5E.51.4B.01',
'192.168.1.3':'4B.35.CD.32', '192.168.4.1':'AF.4D.1F.FF',
'192.168.3.2':'C3.C5.EE.C2', '1E.4A.4A.11':'192.168.1.1',
'5E.51.4B.01':'192.168.2.1', '4B.35.CD.32':'192.168.1.3',
'AF.4D.1F.FF':'192.168.4.1',
'C3.C5.EE.C2':'192.168.3.2'
}
s = socket.socket(socket.AF_INET,socket.SOCK_STREAM) s.bind(('',1234))
s.listen()
clientsocket, address = s.accept()
print("Connection From ", address, " Has Established") ip = clientsocket.recv(1024)
ip = ip.decode("utf-8")
mac = table.get(ip,'No entry for given address') clientsocket.send(mac.encode())



Client code:
import socket
s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
s.connect(('localhost',1234))
a=input("ARP or RARP:")
if(a=="ARP"):
add = input('Enter IP : ')
elif(a=="RARP"):
add = input('Enter MAC : ')
s.send(add.encode())
mac = s.recv(1024)
mac = mac.decode("utf-8")
if(a=="ARP"):
print('MAC of',add,' is : ',mac)
else:
print('IP of',add,' is : ',mac)

p7 ns2    STUDY OF TCP/UDP PEFORMANCE USING SIMULATION TOOL

UDP Performance
set ns [new Simulator]
set nf [open tcp.nam w]
$ns namtrace-all
$nf set tf [open out.tr w]
$ns trace-all $tf
proc finish {} {
global ns nf tf
$ns flush-trace
close $nf
close $tf
exec nam tcp.nam & exit 0
}
set n0 [$ns node]
set n1 [$ns node]
set n2 [$ns node]
set n3 [$ns node]
set n4 [$ns node]
set n5 [$ns node]
$ns duplex-link $n0 $n4 1Mb 50ms DropTail
$ns duplex-link $n1 $n4 1Mb 50ms DropTail
$ns duplex-link $n2 $n5 1Mb 1ms DropTail
$ns duplex-link $n3 $n5 1Mb 1ms DropTail
$ns duplex-link $n4 $n5 1Mb 50ms DropTail
$ns duplex-link-op $n4 $n5 queuePos 0.5
set tcp [new Agent/TCP]
$ns attach-agent $n0 $tcp
set sink [new Agent/TCPSink]
$ns attach-agent $n2 $sink
$ns connect $tcp $sink
set ftp [new Application/FTP]
$ftp attach-agent $tcp
$ns at 0.0 "$ftp start"
$ns at 2.5 "$ftp stop"
$ns at 3 "finish"
$ns run

TCP PRO

#Create a simulator object
set ns [new Simulator]
#Define different colors for data flows (for NAM)
$ns color 1 Blue
$ns color 2 Red
#Open the NAM trace file set nf [open out.nam w]
$ns namtrace-all $nf #Define a 'finish' procedure proc finish {} {
global ns nf
$ns flush-trace
#Close the NAM trace file close $nf
#Execute NAM on the trace file exec nam out.nam &
exit 0
}
#Create four nodes set n0 [$ns node] set n1 [$ns node] set n2 [$ns node] set n3 [$ns node]
#Create links between the nodes
$ns duplex-link $n0 $n2 2Mb 10ms DropTail
$ns duplex-link $n1 $n2 2Mb 10ms DropTail
$ns duplex-link $n2 $n3 1.7Mb 20ms DropTail #Set Queue Size of link (n2-n3) to 10
$ns queue-limit $n2 $n3 10 #Give node position (for NAM)
$ns duplex-link-op $n0 $n2 orient right-down
$ns duplex-link-op $n1 $n2 orient right-up
$ns duplex-link-op $n2 $n3 orient right #Monitor the queue for link (n2-n3). (for NAM)
$ns duplex-link-op $n2 $n3 queuePos 0.5 #Setup a TCP connection
set tcp [new Agent/TCP]
$tcp set class_ 2
$ns attach-agent $n0 $tcp set sink [new Agent/TCPSink]
$ns attach-agent $n3 $sink
$ns connect $tcp $sink
$tcp set fid_ 1
#Setup a FTP over TCP connection set ftp [new Application/FTP]
$ftp attach-agent $tcp
$ftp set type_ FTP #Setup a UDP connection set udp [new Agent/UDP]
$ns attach-agent $n1 $udp set null [new Agent/Null]
$ns attach-agent $n3 $null
$ns connect $udp $null
$udp set fid_ 2
#Setup a CBR over UDP connection set cbr [new Application/Traffic/CBR]
$cbr attach-agent $udp
$cbr set type_ CBR
$cbr set packet_size_ 1000
$cbr set rate_ 1mb
$cbr set random_ false
#Schedule events for the CBR and FTP agents
$ns at 0.1 "$cbr start"
$ns at 1.0 "$ftp start"
$ns at 4.0 "$ftp stop"
$ns at 4.5 "$cbr stop"
#Detach tcp and sink agents (not really necessary)
$ns at 4.5 "$ns detach-agent $n0 $tcp ; $ns detach-agent $n3 $sink" #Call the finish procedure
after 5 seconds of simulation time
$ns at 5.0 "finish"
#Print CBR packet size and interval
puts "CBR packet size = [$cbr set packet_size_]"
puts "CBR interval =[$cbr setinterval_]"
#Run the simulation
$ns run


8   ROUTING ALGORITHMS – DISTANCE VECTOR ROUTING

Source Code:
def bfe(c,intermediate_node,neighbor,no_node):
flag=0
for i in neighbor:
for j in range(no_node):
if((c[i][intermediate_node]+c[intermediate_node][j])< c[i][j]):
#Using Bellman Ford Equation
c[i][j]=c[i][intermediate_node]+c[intermediate_node][j]
flag=1
#c[i][i]=0
if(flag==1):
bfe(c,i,neighbor_set[i],no_node)
if(flag==0 and intermediate_node<no_node-1):
intermediate_node+=1
Expt No : 8 a
ROUTING ALGORITHMS – DISTANCE VECTOR ROUTING
Date :
bfe(c,intermediate_node,neighbor_set[intermediate_node],no_node)
return
no_node=int(input("Enter the number of nodes:"))
c=[[0 for j in range(no_node)] for i in range(no_node)]
for i in range(no_node):
print("Enter initial cost for node ",i,": ")
for j in range(no_node):
c[i][j]=int(input())
print("Initial cost matrix :\n")
for i in range(no_node):
for j in range(no_node):
print(c[i][j],end=" ")
print("\n")
neighbor_set=[[] for i in range(no_node)]
for i in range(no_node):
for j in range(no_node):
if(i!=j): #always reachable from its own node
if(c[i][j]!=1000):
neighbor_set[i].append(j)
print("Neighbors : \n",neighbor_set,"\n")
bfe(c,0,neighbor_set[0],no_node) #initial call
print("final cost matrix :\n")
for i in range(no_node):
for j in range(no_node):
print(c[i][j],end=" ")
print("\n")
#no_node-number of nodes
#c-cost matrix
#nodeb-nodeeighbors
#1000 considered as infinity



9 error correction in java

import java.util.Scanner;

public class ErrorCorrectionCode {

    static String xor(String a, String b) {
        StringBuilder result = new StringBuilder();
        for (int i = 1; i < b.length(); i++) result.append(a.charAt(i) == b.charAt(i) ? '0' : '1');
        return result.toString();
    }

    static String encode(String data, String gen) {
        while (data.length() < gen.length() + data.length()) data = data.charAt(0) == '1' ? xor(data, gen) + data.substring(gen.length()) : data.substring(1);
        return data + "0".repeat(gen.length() - 1);
    }

    static boolean checkCRC(String data, String gen) {
        return data.length() > gen.length() ? checkCRC(xor(data, gen) + data.substring(gen.length()), gen) : data.substring(0, gen.length() - 1).equals("0".repeat(gen.length() - 1));
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter binary data: ");
        String data = sc.nextLine();
        System.out.print("Enter generator polynomial: ");
        String gen = sc.nextLine();
        String encoded = encode(data, gen);
        System.out.println("Encoded data: " + encoded);
        System.out.print("Enter received data: ");
        System.out.println(checkCRC(sc.nextLine(), gen) ? "Data is correct." : "Data has errors.");
        sc.close();
    }
}
